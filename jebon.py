#__________________| INFO |___________________#
#______SCRIPT ENCRYPTED BY PYTHON 3.0
#______CODING BY: DX_JEBON 1N
#______GITHUB : https://github.com/DX_JEBON-IN
#________________| SCRIPT DATA |_____________#

import base64
exec(base64.b64decode(b''))